repository_name: InvokeAI Workflow Processor Node
author: dwringer
license: MIT
description: Calls a predefined workflow payload with a validated input json list.
keywords: [node, invokeai, python, generativeai]
requirements:
  - invokeai>=4
intro: |
  This InvokeAI node pack introduces the concept of *workflow chaining*, enabling dynamic input passing from parent to child workflows. This embeds generation parameters directly into child workflow input forms, making reproducing a given image generation (from dynamic prompts, seeds, parameters, models, etc) a single click operation, using the workflow loaded from that image through right-clicking on it in the UI.

  ### Benefits:
  * **Modular Workflow Design:** Workflows function as reusable "black boxes" for self-contained, multi-stage generation components.
  * **Sequential Callback Chains:** Child workflows can enqueue further workflows for complex multi-stage processing, or even conditional branching.
  * **Improved UI Responsiveness:** Break down large graphs into smaller, focused units, preventing UI slowdowns and keeping input latency (not to mention user cognitive load) to a minimum.
  * **Direct Reproducibility:** Generation parameters are baked in to child workflows, allowing effortless recall and reproduction of specific results. Change the model, prompt, or other parameters on any output image's embedded workflow for immediate variations, without having to recall any metadata or re-input any values.

  ### How it works:

  InvokeAI workflows already utilize a form builder to expose fields in a linear user interface. This node set leverages those forms to create an interface abstraction for enqueuing the execution of one workflow from within another using the **Enqueue Workflow Batch** or **Enqueue Image Workflow Batch** nodes.

  Users define each stage's input and output interfaces in terms of the form builder and this repository's corresponding **Field List Builder** nodes. Through these, stages can be chained, with each sequentially passing outputs (and/or additional fields inherited from its parent) to the subsequent stage's input form.

  ### Further details:

  The *Enqueue Workflow Batch* and *Enqueue Image Workflow Batch* nodes each operate by applying user updates to a pre-defined workflow and sending it directly to the InvokeAI backend API. The first node can load workflows from saved workflow JSON files or saved browser enqueue_batch request payloads, while the second loads workflows directly from InvokeAI images (these are embedded by default in every image saved to the gallery). The nodes generate a schema from the loaded workflow input form then use that to validate an ordered list, provided as another node input, used to update values in the workflow graph. That list is structured like so:
  \`\`\`
  [
   {"prompt": "a portrait of a housecat wearing a tie and business attire"},
   {"value": 1728},
   {"value": 1152},
   {"seed": 700},
   {"num_steps": 4}
  ]
  \`\`\`

  These JSON structures can be input directly as strings, or created with a set of Field List Builder nodes. Every Field List Builder node has one `value` output and three inputs: `existing_json`, `field_name`, and `value`. These nodes are chained together by connecting the `value` output of one to the `existing_json` input of another, by which they can be sequenced in the order they appear in the workflow's linear UI panel.

  Note that field names given can be either the base name as defined in the node itself, or the user-applied label (if it has been renamed). Either will work, with spaces or underscores, and is case insensitive. Duplicate names are no problem as long as they are properly ordered in the input updates JSON.

  To populate EnumFields, simply use strings, and just make sure to type the value exactly as it appears in the enum.

  ##### Workflow payload creation

  To make a workflow available to load by filename, download it from the Invoke UI (as a .json file) and place it in this node's `workflow_payloads` subdirectory. (`<invokeai-install-path>/nodes/workflow-processor-node/workflow_payloads/`). Remember, the Enqueue Image Workflow Batch node can also just load the embedded workflow out of any InvokeAI image saved to the gallery.

  ### Installation:

  To install these nodes, simply place the folder containing this repository's code (or just clone the repository yourself) into your `invokeai/nodes` folder.

outro: |
  For questions/comments/concerns/etc, use github or drop into the InvokeAI discord where you'll probably find someone who can help.